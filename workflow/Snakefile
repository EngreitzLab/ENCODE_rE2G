from snakemake.utils import min_version
min_version("7.0")

import pandas as pd
import os
import yaml
import numpy as np


configfile: "config/config.yaml"
conda: "mamba"
MAX_MEM_MB = config["max_memory_allocation_mb"]
include: "rules/utils.smk" 

E2G_DIR_PATH = os.path.abspath(config["E2G_DIR_PATH"])
config = make_paths_absolute(config, E2G_DIR_PATH) # in case results dir hasn't been created
config["results_dir"] = os.path.join(E2G_DIR_PATH, config["results_dir"])
MODEL_DIR = config["model_dir"]
# set direcotry to write bedpe files for viewing in IGV
if "IGV_dir" in config:
	IGV_DIR = os.path.abspath(config["IGV_dir"])
else:
	IGV_DIR = config["results_dir"]

config["ABC_BIOSAMPLES_MODELS"] = os.path.join(config["results_dir"], "config_biosamples_models.tsv")
if not os.path.exists(config["results_dir"]):
    os.makedirs(config["results_dir"])

module ABC:
	snakefile:
		f"{config['ABC_DIR_PATH']}/workflow/Snakefile"
	config: get_abc_config(config)

use rule * from ABC exclude all as abc_*

RESULTS_DIR = config["results_dir"]
SCRIPTS_DIR = os.path.join(E2G_DIR_PATH, "workflow/scripts")
BIOSAMPLE_DF = ABC.enable_retry(
	pd.read_csv, 
	func_args={'filepath_or_buffer': config["ABC_BIOSAMPLES"], 'sep': '\t'}
)
BIOSAMPLE_ACTIVITIES = {
	biosample: activity for _, (biosample, activity) in 
	BIOSAMPLE_DF[["biosample", "default_accessibility_feature"]].iterrows()
}

# make directory of ABC output where EnhancersAllPutative and EnhancerList are found
# defined to be compatible with training workflow, which can start from an existing ABC directory
ABC_BIOSAMPLES_DIR = {biosample: os.path.join(RESULTS_DIR, biosample) for biosample in BIOSAMPLE_DF.biosample}

# add model directory path to biosamples df
BIOSAMPLE_DF = expand_biosample_df(BIOSAMPLE_DF)

# extract info for accessibility bw files
ACCESSIBILITY_DF = make_accessibility_file_df(BIOSAMPLE_DF, BIOSAMPLE_ACTIVITIES)
bw_files = []
if len(ACCESSIBILITY_DF)>0:
	bw_files = expand(
			os.path.join(IGV_DIR, "{biosample}", "{access_simple_id}.bw"), zip, biosample=ACCESSIBILITY_DF["biosample"],
			access_simple_id=ACCESSIBILITY_DF["access_simple_id"]
		)

# These rules requires the variables above to be defined
include: "rules/genomewide_features.smk"
include: "rules/predictions.smk"
include: "rules/qc.smk"

rule all:
	input: 
		expand(
			os.path.join(RESULTS_DIR, "{biosample}", "{model_name}", "encode_e2g_predictions.tsv.gz"), zip, biosample=BIOSAMPLE_DF['biosample'], model_name=BIOSAMPLE_DF['model_dir_base']
		),
		expand(
			os.path.join(RESULTS_DIR, "{biosample}", "{model_name}", "encode_e2g_predictions_threshold{threshold}_stats.tsv"), zip, biosample=BIOSAMPLE_DF["biosample"],
			model_name=BIOSAMPLE_DF['model_dir_base'], threshold=BIOSAMPLE_DF["model_threshold"]
		),
		expand(
			os.path.join(RESULTS_DIR, "{biosample}", "{model_name}", "encode_e2g_predictions_threshold{threshold}.tsv.gz"), zip, biosample=BIOSAMPLE_DF["biosample"],
			model_name=BIOSAMPLE_DF['model_dir_base'], threshold=BIOSAMPLE_DF["model_threshold"]
		),
		expand(
			os.path.join(IGV_DIR, "{biosample}", "{model_name}", "encode_e2g_predictions_threshold{threshold}.bedpe"), zip, biosample=BIOSAMPLE_DF["biosample"],
			model_name=BIOSAMPLE_DF['model_dir_base'], threshold=BIOSAMPLE_DF["model_threshold"]
		),
		#bw_files, 
		plots = os.path.join(RESULTS_DIR, "qc_plots.pdf")
