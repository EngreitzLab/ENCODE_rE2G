from snakemake.utils import min_version
min_version("7.0")

import pandas as pd


configfile: "config/config.yml"
conda: "mamba"

dataset_config_file = config["dataset_config"]
dataset_config = pd.read_table(dataset_config_file, na_values="").fillna("None").set_index("dataset", drop=False)

RESULTS_DIR = config["results_dir"]

rule all:
	input: 
		expand(
			os.path.join(RESULTS_DIR, "{dataset}", "encode_e2g_predictions.tsv.gz"), dataset=dataset_config['dataset']
		),
		expand(
			os.path.join(RESULTS_DIR, "{dataset}", f"encode_e2g_predictions_threshold{config['threshold']}.tsv.gz"), dataset=dataset_config['dataset']
		),
		os.path.join(RESULTS_DIR, f"qc_plots_threshold{config['threshold']}.pdf")
		# expand(
		# 	os.path.join(RESULTS_DIR, "{dataset}", "EPCrisprBenchmark_ensemble_data_GRCh38.K562_ActivityOnly_features_{nafill}.tsv.gz"), nafill = ["withNA", "NAfilled"], dataset=dataset_config['dataset']
		# )
	

rule gen_new_features: 
	input:
		abc_predictions = lambda wildcards: dataset_config.loc[wildcards.dataset, "EnhancerPredictionsAllPutative"],
		enhancer_list = lambda wildcards: dataset_config.loc[wildcards.dataset, "EnhancerList"]
	params:
		gene_TSS500 = config['gene_TSS500'],
		chr_sizes = config['chr_sizes']
	conda:
		"envs/encode_e2g_features.yml"
	resources:
		mem_mb=32*1000
	output: 
		NumCandidateEnhGene = os.path.join(RESULTS_DIR, "{dataset}", "NumCandidateEnhGene.tsv"),
		NumTSSEnhGene = os.path.join(RESULTS_DIR, "{dataset}", "NumTSSEnhGene.tsv"),
		NumEnhancersEG5kb = os.path.join(RESULTS_DIR, "{dataset}", "NumEnhancersEG5kb.txt"),
		SumEnhancersEG5kb = os.path.join(RESULTS_DIR, "{dataset}", "SumEnhancersEG5kb.txt"),
		NumEnhancersEG10kb = os.path.join(RESULTS_DIR, "{dataset}", "NumEnhancersEG10kb.txt"),
		SumEnhancersEG10kb = os.path.join(RESULTS_DIR, "{dataset}", "SumEnhancersEG10kb.txt"),
	shell: 
		""" 
		python workflow/scripts/gen_new_features.py \
			--enhancer_list {input.enhancer_list} \
			--abc_predictions {input.abc_predictions} \
			--ref_gene_tss {params.gene_TSS500} \
			--chr_sizes {params.chr_sizes} \
			--results_dir {RESULTS_DIR}/{wildcards.dataset}
		"""


# create activity-only feature table
rule activity_only_features:
	input:
		feature_config = "config/feature_config.tsv",
		abc = lambda wildcards: dataset_config.loc[wildcards.dataset, "EnhancerPredictionsAllPutative"],
		NumCandidateEnhGene = os.path.join(RESULTS_DIR, "{dataset}", "NumCandidateEnhGene.tsv"),
		NumTSSEnhGene = os.path.join(RESULTS_DIR, "{dataset}", "NumTSSEnhGene.tsv"),
		NumEnhancersEG5kb = os.path.join(RESULTS_DIR, "{dataset}", "NumEnhancersEG5kb.txt"),
		SumEnhancersEG5kb = os.path.join(RESULTS_DIR, "{dataset}", "SumEnhancersEG5kb.txt"),
		ubiqExprGenes = config["ubiq_expr_genes"]
	params:
		activity = lambda wildcards: dataset_config.loc[wildcards.dataset, "activity"]
	output: 
		predictions_extended = os.path.join(RESULTS_DIR, "{dataset}", "ActivityOnly_features.tsv.gz")
	conda:
		"envs/encode_e2g_features.yml"
	resources:
		mem_mb=32*1000
	script:
		"scripts/activity_only_features.R"

# overlap activity-only feature table table with K562 CRISPR data
rule overlap_activity_only_features_crispr:
	input:
		features = os.path.join(RESULTS_DIR, "{dataset}/ActivityOnly_features.tsv.gz"),
		crispr = config['crispr_dataset'],
		config = config['feature_config'],
		tss = config['gene_TSS500']
	output: 
		os.path.join(RESULTS_DIR, "{dataset}", "EPCrisprBenchmark_ensemble_data_GRCh38.K562_ActivityOnly_features_{nafill}.tsv.gz")
	params:
		filter_genes = "none",
		activity = lambda wildcards: dataset_config.loc[wildcards.dataset, "activity"]
	conda:
		"envs/encode_e2g_features.yml" 
	resources:
		mem_mb=32*1000
	script:
		"scripts/overlap_features_with_crispr_data.R"


rule generate_e2g_predictions:
	input:
		predictions_extended = os.path.join(RESULTS_DIR, "{dataset}", "ActivityOnly_features.tsv.gz"),
		feature_table_file = config["feature_table"],
	params:
		epsilon = config["epsilon"],
		models_dir = config["models_dir"],
	conda:
		"envs/encode_e2g_features.yml"
	resources:
		mem_mb=32*1000
	output: 
		prediction_file = os.path.join(RESULTS_DIR, "{dataset}", "encode_e2g_predictions.tsv.gz")
	shell: 
		""" 
		python workflow/scripts/run_e2g.py \
			--predictions {input.predictions_extended} \
			--feature_table_file {input.feature_table_file} \
			--epsilon {params.epsilon} \
			--models_dir {params.models_dir} \
			--output_file {output.prediction_file}
		"""

rule filter_e2g_predictions:
	input:
		prediction_file = os.path.join(RESULTS_DIR, "{dataset}", "encode_e2g_predictions.tsv.gz")
	params:
		threshold = config["threshold"],
	conda:
		"envs/encode_e2g_features.yml"
	resources:
		mem_mb=4*1000
	output:
		thresholded = os.path.join(RESULTS_DIR, "{dataset}", "encode_e2g_predictions_threshold{threshold}.tsv.gz")
	shell:
		"""
		zcat {input.prediction_file} | awk -F'\t' '$NF >= {params.threshold}' | gzip > {output.thresholded}
		"""

rule get_stats:
	input:
		thresholded = os.path.join(RESULTS_DIR, "{dataset}", "encode_e2g_predictions_threshold{threshold}.tsv.gz")
	conda:
		"envs/encode_e2g_features.yml"
	resources:
		mem_mb=4*1000
	output:
		stats = os.path.join(RESULTS_DIR, "{dataset}", "encode_e2g_predictions_threshold{threshold}_stats.tsv")
	shell:
		"""
		python workflow/scripts/get_stats.py --predictions {input.thresholded} --output_file {output.stats}
		"""

rule generate_plots:
	input:
		expand(
			os.path.join(RESULTS_DIR, "{dataset}", f"encode_e2g_predictions_threshold{config['threshold']}_stats.tsv"), dataset=dataset_config['dataset']
		)
	conda:
		"envs/encode_e2g_features.yml"
	resources:
		mem_mb=4*1000
	output:
		plots = os.path.join(RESULTS_DIR, "qc_plots_threshold{threshold}.pdf")
	shell:
		"""
		python workflow/scripts/generate_plots.py \
			--results_dir {RESULTS_DIR} \
			--output_file {output.plots} \
			# --y2ave_metadata /oak/stanford/groups/engreitz/Users/atan5133/igvf_dataset_processing/Y2AVE_SingleCellDatasets.CellClusterTable.tsv
		"""